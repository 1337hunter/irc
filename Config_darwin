#!/bin/zsh

dir=$HOME/ircserv
FD_MAX=1024
BUF_SIZE=512
DEBUG_MODE=0
TLSCERT=0
WHOWAS_MAX=2000
CPP98=1
ASAN=0
PING_TIMEOUT=60
PING_FREQUENCY=60

RECOMPILE=0
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[93m"
CYAN="\e[36m"
CEND="\e[0m"

nums='^[0-9]+$'
$red

clear
echo -e 	"
 _____   _____     _____
|_   _| |  __ \   / ____|
  | |   | |__) | | |       ___   ____   _ __  __    __
  | |   |  _  /  | |      / __| /  _ \ | '__| \ \  / /
 _| |_  | | \ \  | |____  \__ \ \  __/ | |     \ \/ /
|_____| |_|  \_\  \_____| |___/  \___  |_|      \__/"

echo -e "
                Welcome to the ircserv 2.10 configurator! ;)
				"

echo -e "\nWhat directory do you want to install ircserv?"
echo -n "["$dir"] -> "
read red
if [[ -z "$red" ]]
then
	red=$dir
fi
if [[ -z "$red" ]]
then
	sed -i '' "3s|.*|\$dir|g" ./Config_darwin
else
	sed -i '' "3s|.*|dir=$red|g" ./Config_darwin
	dir=$red
fi

echo -e "\nHow many connections (maximum number of sockets) do you want to manage to?"
while true
do
	echo -n "["$FD_MAX"] -> "
	read red
	if [[ -z "$red" ]]
	then
		red=$FD_MAX
	elif [[ ${red:0:1} == "0" ]]
	then
		echo -e $RED"\nValue must not start with zero\n"$CEND
		continue
	elif ! [[ $red =~ $nums ]]
	then
		echo -e $RED"\nValue must be an integer\n"$CEND
		continue
	fi
	if [[ -z "$red" ]]
	then
		sed -i '' "4s|.*|\$FD_MAX|g" ./Config_darwin
	else
		sed -i '' "4s|.*|FD_MAX=$red|g" ./Config_darwin
		FD_MAX=$red
	fi
	RECOMPILE=1
	break
done

echo -e "\nWhat buffer size do you want?"
while true
do
	echo -n "["$BUF_SIZE"] -> "
	read red
	if [[ -z "$red" ]]
	then
		red=$BUF_SIZE
	elif [[ ${red:0:1} == "0" ]]
	then
		echo -e $RED"\nValue must not start with zero\n"$CEND
		continue
	elif ! [[ $red =~ $nums ]]
	then
		echo -e $RED"\nValue must be an integer\n"$CEND
		continue
	fi
	if [[ -z "$red" ]]
	then
		sed -i '' "5s|.*|\$BUF_SIZE|g" ./Config_darwin
	else
		sed -i '' "5s|.*|BUF_SIZE=$red|g" ./Config_darwin
		BUF_SIZE=$red
	fi
	RECOMPILE=1
	break
done

echo -e "\nDo you want to compile with debug mode? (Y/n)"
while true
do
	if [[ $DEBUG_MODE == 0 ]] ; then
   		echo -n "[No] -> "
	else
		echo -n "[Yes] -> "
	fi
    read red
    if [[ -z "$red" ]]
    then
        red=$DEBUG_MODE
	fi
	case "$red" in
		[Yy]*)
			if [[ $DEBUG_MODE == 0 ]] ; then
				RECOMPILE=1
			fi
			DEBUG_MODE="1"
			sed -i '' "6s|.*|DEBUG_MODE="1"|g" ./Config_darwin
			;;
		[Nn]*)
			if [[ $DEBUG_MODE == 1 ]] ; then
				RECOMPILE=1
			fi
			DEBUG_MODE="0"
			sed -i '' "6s|.*|DEBUG_MODE="0"|g" ./Config_darwin
			;;
		""*)
			break
			;;
		*)
			echo -e $RED"\nYour reply must be 'Yes' ot 'No'\n"$CEND
			continue
			;;
	esac
    break
done

echo -e "\nDo you want to generate SSL certificate? (Y/n)"
while true
do
	if [[ $TLSCERT == 0 ]] ; then
   		echo -n "[No] -> "
	else
		echo -n "[Yes] -> "
	fi
    read red
    if [[ -z "$red" ]]
	then
		red=$TLSCERT
	fi
	case "$red" in
		[Yy]*)
			TLSCERT="1"
			sed -i '' "7s|.*|TLSCERT="1"|g" ./Config_darwin
			;;
		[Nn]*)
			TLSCERT="0"
			sed -i '' "7s|.*|TLSCERT="0"|g" ./Config_darwin
			;;
		""*)
			break
			;;
		*)
			echo -e $RED"\nYour reply must be 'Yes' ot 'No'\n"$CEND
			continue
			;;
	esac
	break
done

echo -e "\nHow far back do you want to keep the nickname history?"
while true
do
	echo -n "["$WHOWAS_MAX"] -> "
	read red
	if [[ -z "$red" ]]
	then
		break
	elif [[ ${red:0:1} == "0" ]]
	then
		echo -e $RED"\nValue must not start with zero\n"$CEND
		continue
	elif ! [[ $red =~ $nums ]]
	then
		echo -e $RED"\nValue must be an integer\n"$CEND
		continue
	fi
	sed -i '' "8s|.*|WHOWAS_MAX=$red|g" ./Config_darwin
	WHOWAS_MAX=$red
	RECOMPILE=1
	break
done

echo -e "\nDo you want to compile in c++98 standard? (Y/n)"
while true
do
	if [[ $CPP98 == 0 ]] ; then
   		echo -n "[No] -> "
	else
		echo -n "[Yes] -> "
	fi
    read red
    if [[ -z "$red" ]]
	then
		break
	fi
	case "$red" in
		[Yy]*)
			if [[ $CPP98 == 0 ]] ; then
				RECOMPILE=1
			fi
			CPP98=1
			sed -i '' "9s|.*|CPP98=1|g" ./Config_darwin
			;;
		[Nn]*)
			if [[ $CPP98 == 1 ]] ; then
				RECOMPILE=1
			fi
			CPP98=0
			sed -i '' "9s|.*|CPP98=0|g" ./Config_darwin
			;;
		*)
			echo -e $RED"\nYour reply must be 'Yes' ot 'No'\n"$CEND
			continue
			;;
	esac
	break
done

echo -e "\nDo you want to compile with flag -fsanitize=address (Y/n)"
while true
do
	if [[ $ASAN == 0 ]] ; then
   		echo -n "[No] -> "
	else
		echo -n "[Yes] -> "
	fi
    read red
    if [[ -z "$red" ]]
	then
		break
	fi
	case "$red" in
		[Yy]*)
			if [[ $ASAN == 0 ]] ; then
				RECOMPILE=1
			fi
			ASAN=1
			sed -i '' "10s|.*|ASAN=1|g" ./Config_darwin
			;;
		[Nn]*)
			if [[ $ASAN == 1 ]] ; then
				RECOMPILE=1
			fi
			ASAN=0
			RECOMPILE=1
			sed -i '' "10s|.*|ASAN=0|g" ./Config_darwin
			;;
		*)
			echo -e $RED"\nYour reply must be 'Yes' ot 'No'\n"$CEND
			continue
			;;
	esac
	break
done

echo -e "\nHow fast do you want to close connections after ping no response?"
while true
do
	echo -n "["$PING_TIMEOUT"] -> "
	read red
	if [[ -z "$red" ]]
	then
		break
	elif [[ ${red:0:1} == "0" ]]
	then
		echo -e $RED"\nValue must not start with zero\n"$CEND
		continue
	elif ! [[ $red =~ $nums ]]
	then
		echo -e $RED"\nValue must be an integer\n"$CEND
		continue
	fi
	sed -i '' "11s|.*|PING_TIMEOUT=$red|g" ./Config_darwin
	PING_TIMEOUT=$red
	RECOMPILE=1
	break
done

echo -e "\nHow often do you want to ping connections?"
while true
do
	echo -n "["$PING_FREQUENCY"] -> "
	read red
	if [[ -z "$red" ]]
	then
		break
	elif [[ ${red:0:1} == "0" ]]
	then
		echo -e $RED"\nValue must not start with zero\n"$CEND
		continue
	elif ! [[ $red =~ $nums ]]
	then
		echo -e $RED"\nValue must be an integer\n"$CEND
		continue
	fi
	sed -i '' "12s|.*|PING_FREQUENCY=$red|g" ./Config_darwin
	PING_FREQUENCY=$red
	RECOMPILE=1
	break
done

echo -e "NAME		= ircserv
SRC			= main.cpp ircserv.cpp ircsock_base.cpp ircsock_tls.cpp \\
			tools.cpp stringtools.cpp timetools.cpp error_handle.cpp \\
			message.cpp parse.cpp commands.cpp cmds/cmd_tools.cpp \\
			client.cpp channel.cpp \\
			cmds/cmd_connect.cpp cmds/cmd_nick.cpp cmds/cmd_pass.cpp \\
			cmds/cmd_user.cpp cmds/cmd_ping.cpp cmds/cmd_quit.cpp \\
			cmds/cmd_server.cpp cmds/cmd_squit.cpp cmds/cmd_oper.cpp \\
			cmds/cmd_error.cpp cmds/cmd_admin.cpp cmds/cmd_pong.cpp \\
			cmds/cmd_motd.cpp cmds/cmd_userhost.cpp cmds/cmd_version.cpp \\
			cmds/cmd_info.cpp cmds/cmd_time.cpp cmds/cmd_names.cpp \\
			cmds/cmd_join.cpp cmds/cmd_privmsg.cpp cmds/cmd_invite.cpp \\
			cmds/cmd_who.cpp cmds/cmd_whois.cpp cmds/cmd_whowas.cpp \\
			cmds/cmd_part.cpp cmds/cmd_mode.cpp cmds/cmd_notice.cpp \\
			cmds/cmd_away.cpp cmds/cmd_kill.cpp cmds/cmd_njoin.cpp \\
			cmds/cmd_lusers.cpp cmds/cmd_links.cpp cmds/cmd_stats.cpp \\
			cmds/cmd_ison.cpp cmds/cmd_users.cpp cmds/cmd_topic.cpp \\
			cmds/cmd_kick.cpp cmds/cmd_trace.cpp cmds/cmd_service.cpp \\
			cmds/cmd_die.cpp cmds/cmd_list.cpp cmds/cmd_servlist.cpp \\
			cmds/cmd_wallops.cpp cmds/cmd_rehash.cpp cmds/cmd_squery.cpp" > Makefile
echo "" >> Makefile

echo -e "OBJ			= \$(SRC:.cpp=.o)
SRCDIR		= ./srcs/
OBJDIR		= ./objs/
SRCFILES	= \$(addprefix \$(SRCDIR), \$(SRC))
OBJFILES	= \$(addprefix \$(OBJDIR), \$(OBJ))
DEPFILES	= \$(OBJFILES:.o=.d)
INCLUDEDIR	= ./includes/
HEADERS		= ircserv.hpp tools.hpp error_handle.hpp \\
			reply_codes.hpp error_codes.hpp common_defines.hpp \\
			client.hpp channel.hpp message.hpp commands.hpp
HEADERS		:= \$(addprefix \$(INCLUDEDIR), \$(HEADERS))
PWD			:= \$(shell pwd)

SSLSRCDIR	= ./openssl-1.1.1h/
SSLDIR		= ./openssl/
SSLINCLUDE	= \$(SSLDIR)include/
SSLLIBDIR	= \$(SSLDIR)lib/
SSLLIBS		= \$(SSLLIBDIR)libssl.a \$(SSLLIBDIR)libcrypto.a
# openssl config flags to compile static only: no-shared
SSLFLAG		= --prefix=\$(PWD)/openssl --openssldir=\$(PWD)/openssl \\
			no-shared no-threads
TLSCERT		= ./conf/\$(NAME).crt ./conf/\$(NAME).key

CC			= clang++
CFLAGS		= -Wall -Wextra -Werror -I\$(INCLUDEDIR) -I\$(SSLINCLUDE) -MMD" >> Makefile

echo -e "CFLAGS		+= -DFD_MAX=$FD_MAX -DBUF_SIZE=$BUF_SIZE -DWHOWAS_MAX=$WHOWAS_MAX"  >> Makefile
echo -e "CFLAGS		+= -DPING_TIMEOUT=$PING_TIMEOUT -DPING_FREQUENCY=$PING_FREQUENCY" >> Makefile

if [[ $DEBUG_MODE == 1 || $ASAN == 1 ]] ; then
    echo -e -n "CFLAGS		+= -g -DDEBUG_MODE=$DEBUG_MODE" >> Makefile
else
	echo -e -n "CFLAGS		+= -DDEBUG_MODE=$DEBUG_MODE" >> Makefile
fi

if [[ $ASAN == 1 ]] ; then
	echo -ne " -fsanitize=address" >> Makefile
fi

echo -e "
# linux openssl requires libdl and libpthread (for static lib)
LIBFLAGS	= -L\$(SSLLIBDIR) -lssl -lcrypto -ldl -lpthread
EXECFLAGS	= \$(CFLAGS) \$(LIBFLAGS)
SHELL		= /bin/zsh

UNAME		:= \$(shell uname)
ifeq (\$(UNAME), Darwin)
OSNAME		= Darwin
SSLFLAG		+= darwin64-x86_64-cc
else
	ifeq (\$(UNAME), Linux)
	OSNAME	= Linux
	SSLFLAG	+= linux-x86_64-clang
	else
	OSNAME	= Unknown OS
	endif
endif" >> Makefile

if [[ $DEBUG_MODE == 1 ]] ; then
	echo -e "OSNAME += \$(YELLOW)(debug mode)\$(NC)" >> Makefile
fi

echo -e "
# just in case openssl is not installed on system somehow
ifeq (, \$(shell which openssl))
	OPENSSL = \$(SSLDIR)bin/openssl
else
	OPENSSL	= openssl
endif

RED			= "'\\'"e[31m""
GREEN		= "'\\'"e[32m""
YELLOW		= "'\\'"e[93m""
CYAN		= "'\\'"e[36m""
NC			= "'\\'"e[0m""
ULINE		= "'\\'"e[4m""
ULINEF		= "'\\'"e[24m""

.PHONY: all bonus debugmsg openssl delssl gencert delcert clean fclean re" >> Makefile

if [[ $DEBUG_MODE == 1 ]] ; then
	if [[ $RECOMPILE == 1 ]] ; then
		echo -e "\nall: fclean debugmsg \$(NAME)" >> Makefile
	else
		echo -e "\nall: debugmsg \$(NAME)" >> Makefile
	fi
else
	if [[ $RECOMPILE == 1 ]] ; then
		echo -e "\nall: fclean \$(NAME)" >> Makefile
	else
		echo -e "\nall: \$(NAME)" >> Makefile
	fi
fi

if [[ $RECOMPILE == 1 ]] ; then
	if [[ $DEBUG_MODE == 1 ]] ; then
		echo -e "	@sed -i '' '86s|.*|all: debugmsg \$\$(NAME)|g' ./Makefile" >> Makefile
		echo -e "	@sed -i '' '87d;88d' ./Makefile" >> Makefile
	else
		echo -e "	@sed -i '' '85s|.*|all: \$\$(NAME)|g' ./Makefile" >> Makefile
		echo -e "	@sed -i '' '86d;87d' ./Makefile" >> Makefile
	fi
fi

echo -e "
bonus: \$(NAME)
	@make -C ./bot

-include \$(DEPFILES)

\$(NAME): \$(SSLLIBS) \$(OBJDIR) \$(OBJFILES)
	@echo \"linking \$(GREEN)\$@\$(NC) for \$(OSNAME)\"
	@\$(CC) -o \$@ \$(OBJFILES) \$(EXECFLAGS)
	@echo \"\$(CYAN)executable is ready\$(NC)\"" >> Makefile
echo -e "	@echo \"-------------------------------------------------\"" >> Makefile
echo -e "	@echo \"Now you can run 'make install' to install ircserv\"" >> Makefile
echo -e "	@echo \"-------------------------------------------------\"" >> Makefile

echo -e "
\$(OBJDIR)%.o: \$(SRCDIR)%.cpp
	@echo \"compiling \$(ULINE)\$<\$(ULINEF)\"
	@\$(CC) \$(CFLAGS) -c $< -o \$@

\$(OBJDIR):
	@mkdir -p \$(OBJDIR) \$(OBJDIR)cmds/

# c++98 compatibility" >> Makefile
if [[ $CPP98 == 1 ]] ; then
	echo -e "CFLAGS += -std=c++98 -DSTD_CPP98
OSNAME += (C++98 release)\n" >> Makefile
fi

echo -e "# debugging rules
debugmsg:
	@echo \"\$(YELLOW)compiling \$(NAME) in debug mode\$(NC)\"" >> Makefile

echo -e "
openssl: \$(SSLLIBS)

delssl:
	@echo \"\$(RED)Deleting \$(SSLSRCDIR)\$(NC)\"
	@/bin/rm -rf \$(SSLSRCDIR)
	@echo \"\$(RED)Deleting \$(SSLDIR)\$(NC)\"
	@/bin/rm -rf \$(SSLDIR)

\$(SSLLIBS):
	@echo \"building \$(ULINE)OpenSSL library v1.1.1h\$(ULINEF) (this will take a while)\"
	@echo -n \"extracting archive...\"
	@tar -xf ./openssl-1.1.1h.tar.gz
	@echo \""'\\'"t"'\\'"tdone\"
	@echo -n \"configuring makefile...\"
	@cd \$(SSLSRCDIR) && ./Configure \$(SSLFLAG) > /dev/null && cd ..
	@echo \""'\\'"t"'\\'"tdone\"
	@echo \"configured with \$(SSLFLAG) params\"
	@echo -n \"building libraries...\"
	@make -C \$(SSLSRCDIR) > /dev/null 2> /dev/null
	@echo \""'\\'"t"'\\'"tdone\"
	@echo -n \"installing to ./openssl/...\"
	@make -C \$(SSLSRCDIR) install > /dev/null 2> /dev/null
	@echo \""'\\'"tdone\"

gencert: \$(TLSCERT)

delcert:
	@echo \"\$(RED)Deleting certificates \$(TLSCERT)\$(NC)\"
	@/bin/rm -f \$(TLSCERT)

\$(TLSCERT):
	@echo \"generating tls certificate...\"
	@\$(OPENSSL) req \\
		-x509 -nodes -days 365 -newkey rsa:4096 \\
		-keyout \$(word 2,\$(TLSCERT)) \\
		-out \$(word 1,\$(TLSCERT)) \\
		-subj \"/C=RU/ST=Moscow/L=Moscow/O=42/OU=21/CN=ircserv\"
	@echo \"certificate file"'\\'"t\$(word 1,\$(TLSCERT))\"
	@echo \"certificate key"'\\'"t"'\\'"t\$(word 2,\$(TLSCERT))\"

clean:
	@echo \"\$(RED)Cleaning object files\$(NC)\"
	@/bin/rm -rf \$(OBJDIR)
	@echo \"\$(RED)Deleting \$(SSLSRCDIR)\$(NC)\"
	@/bin/rm -rf \$(SSLSRCDIR)

fclean: clean
	@echo \"\$(RED)Deleting \$(NAME) executable\$(NC)\"
	@/bin/rm -f \$(NAME)

re: fclean all" >> Makefile

echo "" >> Makefile
if [[ $TLSCERT == 1 ]] ; then
	echo -e "install: gencert" >> Makefile
else
	echo -e "install:" >> Makefile
fi
echo -e "	@mkdir -p $dir
	@mkdir -p $dir/conf
	@cp \$(NAME) $dir/\$(NAME)
	@cp ./conf/* $dir/conf" >> Makefile

clear
echo ""
echo -e $GREEN"******************************************************************
*                                                                *
*                                                                *
*            Now you can type make to compile ircserv            *
*                    with configured parameters                  *
*                                                                *
******************************************************************
*                                                                *
******************************************************************
*                                                                *
* The project was developed as part of the task of the school 42 *
*                                                                *
*                                by                              *
*                                                                *
*        salec           https://github.com/thefullarcticfox     *
*        gbright         https://github.com/Antip003             *
*                                                                *
******************************************************************"$CEND
