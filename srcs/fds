commands.cpp:	nick_entry = ft_findnick(_server->clients.begin(), _server->clients.end(), split[1]);
commands.cpp:	if (nick_entry == _server->clients.end())
commands.cpp:		_server->clients.push_back(Client(split[1], fd));
commands.cpp:		it = ft_findclientfd(_server->clients.begin(), _server->clients.end(), fd);
commands.cpp:		if (it != _server->clients.end())
ircserv.cpp:	if ((_server->sock = socket(PF_INET, SOCK_STREAM, pe->p_proto)) < 0)
ircserv.cpp:	if (fcntl(_server->sock, F_SETFL, O_NONBLOCK) < 0)
ircserv.cpp:	sockin.sin_port = htons(_server->port);
ircserv.cpp:	if (setsockopt(_server->sock, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)))
ircserv.cpp:	if (bind(_server->sock, (t_sockaddr*)&sockin, sizeof(sockin)) < 0)
ircserv.cpp:	if (listen(_server->sock, 42) < 0)
ircserv.cpp:	_server->fds[_server->sock].type = FD_SERVER;
ircserv.cpp:	std::cout << "Server created on sock " << _server->sock << std::endl;
ircserv.cpp:	if ((fd = accept(_server->sock, (t_sockaddr*)&csin, &csin_len)) < 0)
ircserv.cpp:	_server->fds[fd].type = FD_CLIENT;
ircserv.cpp:	_server->fds[fd].rdbuf.erase();
ircserv.cpp:		_server->command.at(split[0])(fd, split, _server);
ircserv.cpp:		_server->fds[fd].rdbuf += buf_read;
ircserv.cpp:		if (_server->fds[fd].rdbuf.rfind(CLRF) + _server->clrf.length() ==
ircserv.cpp:			_server->fds[fd].rdbuf.length())
ircserv.cpp:			std::cout << "Client " << fd << " sent " << _server->fds[fd].rdbuf;
ircserv.cpp:			t_strvect	split = ft_splitstring(_server->fds[fd].rdbuf, CLRF);
ircserv.cpp:			_server->fds[fd].rdbuf.erase();
ircserv.cpp:		_server->fds.erase(fd);
ircserv.cpp:		t_citer	it = ft_findclientfd(_server->clients.begin(), _server->clients.end(), fd);
ircserv.cpp:		if (it != _server->clients.end())
ircserv.cpp:		FD_ZERO(&(_server->fdset_read));
ircserv.cpp:		for (std::map<int, t_fd>::iterator it = _server->fds.begin();
ircserv.cpp:			it != _server->fds.end(); it++)
ircserv.cpp:			FD_SET(it->first, &(_server->fdset_read));
ircserv.cpp:		int readyfds = select(lastfd + 1, &(_server->fdset_read), NULL, NULL, NULL);
ircserv.cpp:		for (std::map<int, t_fd>::iterator it = _server->fds.begin();
ircserv.cpp:			readyfds > 0 && it != _server->fds.end(); it++)
ircserv.cpp:			if (FD_ISSET(it->first, &(_server->fdset_read)))
ircserv.cpp:				if (_server->fds[it->first].type == FD_SERVER)
ircserv.cpp:				else if (_server->fds[it->first].type == FD_CLIENT)
main.cpp:		_server->port = stoi(port);
main.cpp:		if (_server->port < 1 || _server->port > 65535)
main.cpp:				_server->pass = pass;
main.cpp:				_server->port = stoi(port);
main.cpp:				if (_server->port < 1 || _server->port > 65535)
main.cpp:			_server->connected_to_host.push_back(temp[0]);
main.cpp:			_server->connected_to_port.push_back(stoi(temp[1]));
main.cpp:				_server->connected_to_pass.push_back(temp[2]);
main.cpp:				_server->connected_to_pass.push_back("");
main.cpp:				_server->port = stoi(pass);
main.cpp:				if (_server->port < 1 || _server->port > 65535)
main.cpp:		_server->connected_to_host.push_back(connect_to[0]);
main.cpp:		_server->pass = pass;
main.cpp:			_server->connected_to_port.push_back(stoi(connect_to[1]));
main.cpp:				_server->connected_to_pass.push_back(connect_to[2]);
main.cpp:				_server->connected_to_pass.push_back("");
main.cpp:			_server->port = stoi(port);
main.cpp:			if (_server->port < 1 || _server->port > 65535)
main.cpp:	_server->command["USER"] = cmd_user;
main.cpp:	_server->command["NICK"] = cmd_nick;
main.cpp:	_server->command["PING"] = cmd_ping;
main.cpp:	std::cout << "server port:      \t" << _server->port << '\n';
main.cpp:	std::cout << "server pass:      \t" << _server->pass << '\n';
main.cpp:	if (_server->connected_to_host.size() > 0)
main.cpp:		std::cout << "connected_to_host:\t" << _server->connected_to_host[0] << '\n';
main.cpp:		std::cout << "connected_to_port:\t" << _server->connected_to_port[0] << '\n';
main.cpp:		std::cout << "connected_to_pass:\t" << _server->connected_to_pass[0] << '\n';
